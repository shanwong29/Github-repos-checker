{"version":3,"sources":["Container/ReposInfo/ReposInfo.module.css","Component/IssueComments/IssueComments.module.css","Container/App/App.module.css","Component/Issue/Issue.module.css","Component/Login/Login.module.css","Component/FormattedDate/FormattedDate.js","Component/PullRequests/PullRequests.js","Component/IssueComments/IssueComments.js","Component/Issue/Issue.js","Container/ReposInfo/ReposInfo.js","Container/SearchField/SearchField.js","Component/Login/Login.js","Container/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","FormattedDate","timeStamp","formattedDate","Date","date","getDate","month","0","1","2","3","4","5","6","7","8","9","10","11","getMonth","year","getFullYear","hh","String","getHours","padStart","mm","getMinutes","PullRequests","pullRequests","edges","map","el","index","author","node","login","className","key","createdAt","title","IssueComments","comments","useState","commentQuery","setCommentQuery","filteredComments","filter","bodyText","includes","sort","a","b","dateA","dateB","commentAuthor","classes","each_comment_wrapper","comment_text","length","comments_wrapper","htmlFor","name","type","placeholder","value","onChange","event","target","Issue","issue","activeIssue","setActiveIssue","issueIndex","issueAuthor","issueText","onClick","issue_text","GET_REPOS","gql","ReposInfo","reposQuery","owner","split","trim","currentTab","setCurrentTab","useQuery","variables","errorPolicy","loading","error","data","reposInfo","graphQLErrors","i","message","repository","openIssues","closedIssues","tap_wrapper","tap","active_tab","SearchField","setReposQuery","createdRef","onSubmit","e","input","preventDefault","handleQuerySubmit","ref","domEl","Login","props","login_form","App","accessToken","localStorage","getItem","token","setToken","httpLink","HttpLink","uri","headers","Authorization","client","ApolloClient","link","cache","InMemoryCache","logoutBtn","clear","app_title","setItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.46b025c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"reposInfo\":\"ReposInfo_reposInfo__2ErSp\",\"tap_wrapper\":\"ReposInfo_tap_wrapper__yu0GN\",\"tap\":\"ReposInfo_tap__29w1m\",\"active_tab\":\"ReposInfo_active_tab__rpF6e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments_wrapper\":\"IssueComments_comments_wrapper__3SA7K\",\"comment_text\":\"IssueComments_comment_text__2owF1\",\"each_comment_wrapper\":\"IssueComments_each_comment_wrapper__Qjbm3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__hoMWS\",\"logoutBtn\":\"App_logoutBtn__11jmP\",\"app_title\":\"App_app_title__an3t-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"issue\":\"Issue_issue__3Kult\",\"issue_text\":\"Issue_issue_text__3WKoU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_form\":\"Login_login_form__uSGcd\"};","import React from \"react\";\n\nconst FormattedDate = ({ timeStamp }) => {\n  let monthEng = {\n    0: \"Jan\",\n    1: \"Feb\",\n    2: \"Mar\",\n    3: \"Apr\",\n    4: \"May\",\n    5: \"Jun\",\n    6: \"Jul\",\n    7: \"Aug\",\n    8: \"Sep\",\n    9: \"Oct\",\n    10: \"Nov\",\n    11: \"Dec\"\n  };\n\n  let formattedDate = new Date(timeStamp);\n  let date = formattedDate.getDate();\n  let monthNum = formattedDate.getMonth();\n  let month = monthEng[monthNum];\n  let year = formattedDate.getFullYear();\n  let hh = String(formattedDate.getHours()).padStart(2, \"0\");\n  let mm = String(formattedDate.getMinutes()).padStart(2, \"0\");\n\n  return (\n    <span>\n      {date} {month} {year} {`${hh}:${mm}`}\n    </span>\n  );\n};\n\nexport default FormattedDate;\n","import React from \"react\";\nimport FormattedDate from \"../FormattedDate/FormattedDate\";\n\nconst PullRequests = ({ pullRequests }) => {\n  pullRequests = pullRequests.edges.map((el, index) => {\n    let author = el.node.author.login;\n    return (\n      <div className=\"info_wrapper\" key={index}>\n        <span>{author} &#8226; </span>\n        <FormattedDate timeStamp={el.node.createdAt} />\n        <h4>{el.node.title}</h4>\n      </div>\n    );\n  });\n  return pullRequests;\n};\n\nexport default PullRequests;\n","import React, { useState } from \"react\";\nimport FormattedDate from \"../FormattedDate/FormattedDate\";\nimport classes from \"./IssueComments.module.css\";\n\nconst IssueComments = ({ comments }) => {\n  const [commentQuery, setCommentQuery] = useState(\"\");\n\n  let filteredComments = comments.filter(el => {\n    return el.node.bodyText.includes(commentQuery);\n  });\n\n  filteredComments.sort((a, b) => {\n    let dateA = new Date(a.node.createdAt);\n    let dateB = new Date(b.node.createdAt);\n    if (dateA < dateB) {\n      return -1;\n    }\n    if (dateA > dateB) {\n      return 1;\n    }\n    return 0;\n  });\n\n  filteredComments = filteredComments.map((el, key) => {\n    let commentAuthor = el.node.author.login;\n    return (\n      <div className={classes.each_comment_wrapper} key={key}>\n        <span>{commentAuthor} &#8226; </span>\n        <FormattedDate timeStamp={el.node.createdAt} />\n\n        <p className={classes.comment_text}>{el.node.bodyText}</p>\n      </div>\n    );\n  });\n\n  return comments.length ? (\n    <div className={classes.comments_wrapper}>\n      <h4>Comments:</h4>\n      <label htmlFor=\"commentQuery\">Filter comments by keyword(s): </label>\n      <input\n        name=\"commentQuery\"\n        type=\"text\"\n        placeholder=\"type keyword(s) here...\"\n        value={commentQuery}\n        onChange={event => setCommentQuery(event.target.value)}\n      />\n      {filteredComments}\n    </div>\n  ) : (\n    <p className={classes.each_comment_wrapper}>No comments for this issue</p>\n  );\n};\n\nexport default IssueComments;\n","import React, { useState, Fragment } from \"react\";\nimport IssueComments from \"../IssueComments/IssueComments\";\nimport FormattedDate from \"../FormattedDate/FormattedDate\";\n\nimport classes from \"./Issue.module.css\";\n\nconst Issue = ({ issue }) => {\n  const [activeIssue, setActiveIssue] = useState(\"\");\n\n  issue = issue.edges.map((el, issueIndex) => {\n    let comments = el.node.comments.edges;\n    let issueAuthor = el.node.author.login;\n    let issueText = el.node.bodyText;\n\n    return (\n      <Fragment key={issueIndex}>\n        <div\n          className={`info_wrapper ${classes.issue}`}\n          onClick={() => {\n            if (issueIndex === activeIssue) {\n              setActiveIssue(null);\n            } else {\n              setActiveIssue(issueIndex);\n            }\n          }}\n        >\n          <span>{issueAuthor} &#8226; </span>\n          <FormattedDate timeStamp={el.node.createdAt} />\n\n          <h4>{el.node.title}</h4>\n\n          {activeIssue === issueIndex && (\n            <p className={classes.issue_text}>{issueText}</p>\n          )}\n        </div>\n\n        {activeIssue === issueIndex && (\n          <IssueComments comments={comments} issueAuthor={issueAuthor} />\n        )}\n      </Fragment>\n    );\n  });\n  return <>{issue}</>;\n};\n\nexport default Issue;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nimport PullRequests from \"../../Component/PullRequests/PullRequests\";\nimport Issue from \"../../Component/Issue/Issue\";\n\nimport classes from \"./ReposInfo.module.css\";\n\nconst GET_REPOS = gql`\n  query($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      name\n      owner {\n        login\n      }\n      pullRequests(last: 5, orderBy: { field: CREATED_AT, direction: ASC }) {\n        edges {\n          node {\n            author {\n              login\n            }\n            title\n            createdAt\n          }\n        }\n      }\n      openIssues: issues(\n        states: OPEN\n        last: 5\n        orderBy: { field: CREATED_AT, direction: ASC }\n      ) {\n        edges {\n          node {\n            ...issueInfo\n          }\n        }\n      }\n      closedIssues: issues(\n        states: CLOSED\n        last: 5\n        orderBy: { field: CREATED_AT, direction: ASC }\n      ) {\n        edges {\n          node {\n            ...issueInfo\n          }\n        }\n      }\n    }\n  }\n\n  fragment issueInfo on Issue {\n    title\n    createdAt\n    bodyText\n    author {\n      login\n    }\n    comments(last: 5) {\n      edges {\n        node {\n          author {\n            login\n          }\n          createdAt\n          bodyText\n        }\n      }\n    }\n  }\n`;\n\nconst ReposInfo = ({ reposQuery }) => {\n  reposQuery = reposQuery.split(\"/\");\n  const owner = reposQuery[0] && reposQuery[0].trim();\n  const name = reposQuery[1] && reposQuery[1].trim();\n\n  const [currentTab, setCurrentTab] = useState(\"pullRequests\");\n\n  const { loading, error, data } = useQuery(\n    GET_REPOS,\n    {\n      variables: { owner, name }\n    },\n    { errorPolicy: \"all\" }\n  );\n\n  if (loading) return <p className={classes.reposInfo}>Loading...</p>;\n\n  if (error) {\n    return error.graphQLErrors.map(({ message }, i) => (\n      <p className={classes.reposInfo} key={i}>\n        {message}\n      </p>\n    ));\n  }\n\n  let { pullRequests, openIssues, closedIssues } = data.repository;\n\n  return (\n    <div className={classes.reposInfo}>\n      <h1>{data.repository.name}</h1>\n      <div className={classes.tap_wrapper}>\n        <h4\n          className={`${classes.tap} ${currentTab === \"pullRequests\" &&\n            classes.active_tab}`}\n          onClick={() => {\n            setCurrentTab(\"pullRequests\");\n          }}\n        >\n          Pull Requests\n        </h4>\n        <h4\n          className={`${classes.tap} ${currentTab === \"openIssues\" &&\n            classes.active_tab}`}\n          onClick={() => {\n            setCurrentTab(\"openIssues\");\n          }}\n        >\n          Open Issues\n        </h4>\n        <h4\n          className={`${classes.tap} ${currentTab === \"closedIssues\" &&\n            classes.active_tab}`}\n          onClick={() => {\n            setCurrentTab(\"closedIssues\");\n          }}\n        >\n          Closed Issues\n        </h4>\n      </div>\n      {currentTab === \"pullRequests\" && (\n        <PullRequests pullRequests={pullRequests} />\n      )}\n      {currentTab === \"openIssues\" && <Issue issue={openIssues} />}\n      {currentTab === \"closedIssues\" && <Issue issue={closedIssues} />}\n    </div>\n  );\n};\n\nexport default ReposInfo;\n","import React from \"react\";\n\nconst SearchField = ({ setReposQuery }) => {\n  let createdRef = \"\";\n\n  const handleQuerySubmit = (e, input) => {\n    e.preventDefault();\n    setReposQuery(input.value);\n  };\n\n  return (\n    <form onSubmit={e => handleQuerySubmit(e, createdRef)}>\n      <label htmlFor=\"reposQuery\">Search Repos: </label>\n      <input\n        name=\"reposQuery\"\n        type=\"text\"\n        placeholder=\"e.g. nuwave/lighthouse\"\n        ref={domEl => {\n          createdRef = domEl;\n        }}\n      />\n      <button>Search</button>\n    </form>\n  );\n};\n\nexport default SearchField;\n","import React from \"react\";\nimport classes from \"./Login.module.css\";\n\nconst Login = props => {\n  let createdRef = \"\";\n  return (\n    <form\n      className={classes.login_form}\n      onSubmit={e => props.login(e, createdRef)}\n    >\n      <input\n        type=\"password\"\n        name=\"token\"\n        ref={domEl => {\n          createdRef = domEl;\n        }}\n        placeholder=\"Paste your GitHub token\"\n      />\n      <button>Login</button>\n    </form>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport ReposInfo from \"../ReposInfo/ReposInfo\";\nimport SearchField from \"../SearchField/SearchField\";\nimport Login from \"../../Component/Login/Login\";\nimport classes from \"./App.module.css\";\n\nconst App = () => {\n  const accessToken = localStorage.getItem(\"storedToken\") || \"\";\n\n  const [token, setToken] = useState(accessToken);\n  const [reposQuery, setReposQuery] = useState(\"\");\n\n  const login = (e, input) => {\n    e.preventDefault();\n    localStorage.setItem(\"storedToken\", input.value);\n    setToken(input.value);\n  };\n\n  const logout = () => {\n    localStorage.clear();\n    setToken(\"\");\n    setReposQuery(\"\");\n  };\n\n  const httpLink = new HttpLink({\n    uri: \"https://api.github.com/graphql\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  const client = new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache()\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <div className={classes.App}>\n        {token && (\n          <button className={classes.logoutBtn} onClick={logout}>\n            Logout\n          </button>\n        )}\n\n        <h1 className={classes.app_title}>Repos Checker</h1>\n\n        {token ? (\n          <>\n            <SearchField\n              reposQuery={reposQuery}\n              setReposQuery={setReposQuery}\n            />\n            {reposQuery && <ReposInfo reposQuery={reposQuery} />}\n          </>\n        ) : (\n          <Login token={token} setToken={setToken} login={login} />\n        )}\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Container/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}