{"version":3,"sources":["Container/ReposInfo/ReposInfo.module.css","Component/IssueComments/IssueComments.module.css","Container/Login/Login.module.css","Component/Issue/Issue.module.css","Container/App/App.module.css","Component/FormattedDate/FormattedDate.js","Component/ProfilePic/ProfilePic.js","Component/AuthorBasicInfo/AuthorBasicInfo.js","Component/PullRequests/PullRequests.js","Component/IssueComments/IssueComments.js","Component/Issue/Issue.js","Component/InputForm/InputForm.js","Container/ReposInfo/ReposInfo.js","Container/Login/Login.js","Container/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","FormattedDate","timeStamp","formattedDate","Date","date","getDate","month","0","1","2","3","4","5","6","7","8","9","10","11","getMonth","year","getFullYear","hh","String","getHours","padStart","mm","getMinutes","ProfilePic","url","username","src","alt","className","AuthorBasicInfo","author","avatarUrl","PullRequests","pullRequests","edges","map","el","index","node","login","key","createdAt","title","IssueComments","comments","useState","commentQuery","setCommentQuery","filteredComments","filter","bodyText","includes","sort","a","b","dateA","dateB","classes","each_comment_wrapper","comment_text","length","comments_wrapper","htmlFor","search_input","name","type","placeholder","value","onChange","event","target","Issue","issue","activeIssue","setActiveIssue","issueIndex","issueText","onClick","issue_text","issueAuthor","InputForm","onSubmitFn","label","btnDisplay","variant","onSubmit","GET_REPOS","gql","ReposInfo","owner","reposQuery","setReposQuery","currentTab","setCurrentTab","split","trim","openIssues","closedIssues","useQuery","skip","variables","errorPolicy","loading","error","data","queryStatus","graphQLErrors","message","repository","reposInfo","e","preventDefault","queryStr","queryInput","handleSearchQuery","tap_wrapper","tap","active_tab","data_wrapper","Login","outhStatus","token","setToken","GET_USER","viewer","logoutBtn","localStorage","clear","setItem","requestStatus","App","accessToken","getItem","httpLink","HttpLink","uri","headers","Authorization","client","ApolloClient","link","cache","InMemoryCache","app_title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f6435394.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"reposInfo\":\"ReposInfo_reposInfo__2ErSp\",\"tap_wrapper\":\"ReposInfo_tap_wrapper__yu0GN\",\"tap\":\"ReposInfo_tap__29w1m\",\"active_tab\":\"ReposInfo_active_tab__rpF6e\",\"data_wrapper\":\"ReposInfo_data_wrapper__3YbU_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments_wrapper\":\"IssueComments_comments_wrapper__3SA7K\",\"comment_text\":\"IssueComments_comment_text__2owF1\",\"each_comment_wrapper\":\"IssueComments_each_comment_wrapper__Qjbm3\",\"search_input\":\"IssueComments_search_input__2hvLZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logoutBtn\":\"Login_logoutBtn__2Q-at\",\"requestStatus\":\"Login_requestStatus__ROc7N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"issue\":\"Issue_issue__3Kult\",\"issue_text\":\"Issue_issue_text__3WKoU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__hoMWS\",\"app_title\":\"App_app_title__an3t-\"};","import React from \"react\";\n\nconst FormattedDate = ({ timeStamp }) => {\n  let monthEng = {\n    0: \"Jan\",\n    1: \"Feb\",\n    2: \"Mar\",\n    3: \"Apr\",\n    4: \"May\",\n    5: \"Jun\",\n    6: \"Jul\",\n    7: \"Aug\",\n    8: \"Sep\",\n    9: \"Oct\",\n    10: \"Nov\",\n    11: \"Dec\"\n  };\n\n  let formattedDate = new Date(timeStamp);\n  let date = formattedDate.getDate();\n  let monthNum = formattedDate.getMonth();\n  let month = monthEng[monthNum];\n  let year = formattedDate.getFullYear();\n  let hh = String(formattedDate.getHours()).padStart(2, \"0\");\n  let mm = String(formattedDate.getMinutes()).padStart(2, \"0\");\n\n  return (\n    <span>\n      {date} {month} {year} {`${hh}:${mm}`}\n    </span>\n  );\n};\n\nexport default FormattedDate;\n","import React from \"react\";\nimport \"./ProfilePic.css\";\n\nconst ProfilePic = ({ url, username }) => {\n  return <img src={url} alt={username} className=\"profilePic\" />;\n};\n\nexport default ProfilePic;\n","import React from \"react\";\nimport FormattedDate from \"../FormattedDate/FormattedDate\";\nimport ProfilePic from \"../ProfilePic/ProfilePic\";\n\nconst AuthorBasicInfo = ({ author, avatarUrl, timeStamp }) => {\n  return (\n    <>\n      <ProfilePic username={author} url={avatarUrl} />\n      <span>{author} &#8226; </span>\n      <FormattedDate timeStamp={timeStamp} />\n    </>\n  );\n};\n\nexport default AuthorBasicInfo;\n","import React from \"react\";\nimport AuthorBasicInfo from \"../AuthorBasicInfo/AuthorBasicInfo\";\n\nconst PullRequests = ({ pullRequests }) => {\n  pullRequests = pullRequests.edges.map((el, index) => {\n    let author = el.node.author.login;\n    let { avatarUrl } = el.node.author;\n    return (\n      <div className=\"info_wrapper\" key={index}>\n        <AuthorBasicInfo\n          author={author}\n          avatarUrl={avatarUrl}\n          timeStamp={el.node.createdAt}\n        />\n        <h4>{el.node.title}</h4>\n      </div>\n    );\n  });\n  return pullRequests;\n};\n\nexport default PullRequests;\n","import React, { useState } from \"react\";\nimport classes from \"./IssueComments.module.css\";\nimport AuthorBasicInfo from \"../AuthorBasicInfo/AuthorBasicInfo\";\n\nconst IssueComments = ({ comments }) => {\n  const [commentQuery, setCommentQuery] = useState(\"\");\n\n  let filteredComments = comments.filter((el) => {\n    return el.node.bodyText.includes(commentQuery);\n  });\n\n  filteredComments.sort((a, b) => {\n    let dateA = new Date(a.node.createdAt);\n    let dateB = new Date(b.node.createdAt);\n    if (dateA < dateB) {\n      return -1;\n    }\n    if (dateA > dateB) {\n      return 1;\n    }\n    return 0;\n  });\n\n  filteredComments = filteredComments.map((el, key) => {\n    let author = el.node.author.login;\n    let { avatarUrl } = el.node.author;\n    return (\n      <div className={classes.each_comment_wrapper} key={key}>\n        <AuthorBasicInfo\n          author={author}\n          avatarUrl={avatarUrl}\n          timeStamp={el.node.createdAt}\n        />\n\n        <p className={classes.comment_text}>{el.node.bodyText}</p>\n      </div>\n    );\n  });\n\n  return comments.length ? (\n    <div className={classes.comments_wrapper}>\n      <h4>Comments:</h4>\n      <label htmlFor=\"commentQuery\">Filter comments by keyword(s): </label>\n      <input\n        className={classes.search_input}\n        name=\"commentQuery\"\n        type=\"text\"\n        placeholder=\"type keyword(s) here...\"\n        value={commentQuery}\n        onChange={(event) => setCommentQuery(event.target.value)}\n      />\n      {filteredComments}\n    </div>\n  ) : (\n    <p className={classes.each_comment_wrapper}>No comments for this issue</p>\n  );\n};\n\nexport default IssueComments;\n","import React, { useState, Fragment } from \"react\";\nimport IssueComments from \"../IssueComments/IssueComments\";\nimport AuthorBasicInfo from \"../AuthorBasicInfo/AuthorBasicInfo\";\nimport classes from \"./Issue.module.css\";\n\nconst Issue = ({ issue }) => {\n  const [activeIssue, setActiveIssue] = useState(\"\");\n\n  issue = issue.edges.map((el, issueIndex) => {\n    let comments = el.node.comments.edges;\n    let author = el.node.author.login;\n    let { avatarUrl } = el.node.author;\n    let issueText = el.node.bodyText;\n\n    return (\n      <Fragment key={issueIndex}>\n        <div\n          className={`info_wrapper ${classes.issue}`}\n          onClick={() => {\n            if (issueIndex === activeIssue) {\n              setActiveIssue(null);\n            } else {\n              setActiveIssue(issueIndex);\n            }\n          }}\n        >\n          <AuthorBasicInfo\n            author={author}\n            avatarUrl={avatarUrl}\n            timeStamp={el.node.createdAt}\n          />\n\n          <h4>{el.node.title}</h4>\n\n          {activeIssue === issueIndex && (\n            <p className={classes.issue_text}>{issueText}</p>\n          )}\n        </div>\n\n        {activeIssue === issueIndex && (\n          <IssueComments comments={comments} issueAuthor={author} />\n        )}\n      </Fragment>\n    );\n  });\n  return <>{issue}</>;\n};\n\nexport default Issue;\n","import React from \"react\";\nimport \"./InputForm.css\";\n\nconst InputForm = ({\n  onSubmitFn,\n  name,\n  label,\n  value,\n  type,\n  placeholder,\n  btnDisplay,\n  variant,\n}) => {\n  return (\n    <>\n      <label className=\"inputForm__label\" htmlFor={name}>\n        {label}\n      </label>\n      <form onSubmit={onSubmitFn} className={`inputForm inputForm__${variant}`}>\n        <input\n          name={name}\n          type={type}\n          value={value}\n          placeholder=\" \"\n          className=\"inputForm__input\"\n        />\n        <span className=\"inputForm__placeholder\">{placeholder}</span>\n        <button className=\"inputForm__btn\">{btnDisplay}</button>\n      </form>\n    </>\n  );\n};\n\nexport default InputForm;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nimport PullRequests from \"../../Component/PullRequests/PullRequests\";\nimport Issue from \"../../Component/Issue/Issue\";\nimport InputForm from \"../../Component/InputForm/InputForm\";\nimport classes from \"./ReposInfo.module.css\";\n\nconst GET_REPOS = gql`\n  query($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      name\n      owner {\n        login\n      }\n      pullRequests(last: 5, orderBy: { field: CREATED_AT, direction: ASC }) {\n        edges {\n          node {\n            author {\n              login\n              avatarUrl\n            }\n            title\n            createdAt\n          }\n        }\n      }\n      openIssues: issues(\n        states: OPEN\n        last: 5\n        orderBy: { field: CREATED_AT, direction: ASC }\n      ) {\n        edges {\n          node {\n            ...issueInfo\n          }\n        }\n      }\n      closedIssues: issues(\n        states: CLOSED\n        last: 5\n        orderBy: { field: CREATED_AT, direction: ASC }\n      ) {\n        edges {\n          node {\n            ...issueInfo\n          }\n        }\n      }\n    }\n  }\n\n  fragment issueInfo on Issue {\n    title\n    createdAt\n    bodyText\n    author {\n      login\n      avatarUrl\n    }\n    comments(last: 5) {\n      edges {\n        node {\n          author {\n            login\n            avatarUrl\n          }\n          createdAt\n          bodyText\n        }\n      }\n    }\n  }\n`;\n\nconst ReposInfo = ({ reposQuery, setReposQuery }) => {\n  const [currentTab, setCurrentTab] = useState(\"pullRequests\");\n\n  let owner;\n  let name;\n  if (reposQuery) {\n    reposQuery = reposQuery.split(\"/\");\n    owner = reposQuery[0] && reposQuery[0].trim();\n    name = reposQuery[1] && reposQuery[1].trim();\n  }\n  const handleSearchQuery = (e) => {\n    e.preventDefault();\n    let queryStr = e.target.queryInput.value;\n    setReposQuery(queryStr);\n  };\n\n  const { loading, error, data } = useQuery(\n    GET_REPOS,\n    { skip: !owner, variables: { owner, name } },\n    { errorPolicy: \"all\" }\n  );\n\n  let queryStatus = \"\";\n\n  if (loading) {\n    queryStatus = \"loading...\";\n  }\n\n  if (error) {\n    queryStatus = error.graphQLErrors[0].message;\n  }\n\n  let pullRequests;\n  let openIssues;\n  let closedIssues;\n\n  if (data) {\n    openIssues = data.repository.openIssues;\n    closedIssues = data.repository.closedIssues;\n    pullRequests = data.repository.pullRequests;\n  }\n\n  return (\n    <div className={classes.reposInfo}>\n      <InputForm\n        onSubmitFn={(e) => handleSearchQuery(e)}\n        name=\"queryInput\"\n        label=\"Search Repos: \"\n        type=\"text\"\n        placeholder=\"e.g. nuwave/lighthouse\"\n        btnDisplay=\"Search\"\n      />\n\n      <p>{queryStatus}</p>\n\n      {data && (\n        <>\n          <h1>{data.repository.name}</h1>\n          <div className={classes.tap_wrapper}>\n            <h4\n              className={`${classes.tap} ${\n                currentTab === \"pullRequests\" && classes.active_tab\n              }`}\n              onClick={() => {\n                setCurrentTab(\"pullRequests\");\n              }}\n            >\n              Pull Requests\n            </h4>\n            <h4\n              className={`${classes.tap} ${\n                currentTab === \"openIssues\" && classes.active_tab\n              }`}\n              onClick={() => {\n                setCurrentTab(\"openIssues\");\n              }}\n            >\n              Open Issues\n            </h4>\n            <h4\n              className={`${classes.tap} ${\n                currentTab === \"closedIssues\" && classes.active_tab\n              }`}\n              onClick={() => {\n                setCurrentTab(\"closedIssues\");\n              }}\n            >\n              Closed Issues\n            </h4>\n          </div>\n          <div className={classes.data_wrapper}>\n            {currentTab === \"pullRequests\" && (\n              <PullRequests pullRequests={pullRequests} />\n            )}\n            {currentTab === \"openIssues\" && <Issue issue={openIssues} />}\n            {currentTab === \"closedIssues\" && <Issue issue={closedIssues} />}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ReposInfo;\n","import React, { useState } from \"react\";\nimport classes from \"./Login.module.css\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport ReposInfo from \"../ReposInfo/ReposInfo\";\nimport InputForm from \"../../Component/InputForm/InputForm\";\nimport ProfilePic from \"../../Component/ProfilePic/ProfilePic\";\n\nconst Login = ({ token, setToken }) => {\n  const [reposQuery, setReposQuery] = useState(\"\");\n\n  const GET_USER = gql`\n    query {\n      viewer {\n        login\n        avatarUrl\n      }\n    }\n  `;\n\n  const login = (e) => {\n    e.preventDefault();\n    setToken(e.target.token.value);\n    localStorage.setItem(\"storedToken\", e.target.token.value);\n  };\n\n  const logout = () => {\n    localStorage.clear();\n    setToken(\"\");\n    setReposQuery(\"\");\n  };\n\n  const { loading, error, data } = useQuery(\n    GET_USER,\n    { skip: !token },\n    { errorPolicy: \"all\" }\n  );\n\n  let outhStatus;\n  if (loading) {\n    outhStatus = \"loading...\";\n  }\n  if (error) {\n    outhStatus =\n      \"Something goes wrong. Make sure the given / stored token is valid\";\n  }\n\n  if (data) {\n    let { avatarUrl } = data.viewer;\n    let username = data.viewer.login;\n    return (\n      <>\n        <button className={classes.logoutBtn} onClick={logout}>\n          <ProfilePic url={avatarUrl} username={username} /> <p>Logout</p>\n        </button>\n        {<ReposInfo reposQuery={reposQuery} setReposQuery={setReposQuery} />}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <InputForm\n        onSubmitFn={(e) => {\n          login(e);\n        }}\n        name=\"token\"\n        type=\"password\"\n        placeholder=\"Paste your GitHub token\"\n        btnDisplay=\"Login\"\n        variant=\"middle\"\n      />\n      <p className={classes.requestStatus}>{outhStatus}</p>\n    </>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport Login from \"../Login/Login\";\nimport classes from \"./App.module.css\";\n\nconst App = () => {\n  const accessToken = localStorage.getItem(\"storedToken\") || \"\";\n  const [token, setToken] = useState(accessToken);\n\n  const httpLink = new HttpLink({\n    uri: \"https://api.github.com/graphql\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const client = new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache(),\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <div className={classes.App}>\n        <h1 className={classes.app_title}>Repos Checker</h1>\n        <Login token={token} setToken={setToken} />\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Container/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}